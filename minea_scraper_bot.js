// minea_scraper_bot.js
require('dotenv').config();
const puppeteer = require('puppeteer');
const express = require('express');
const { Telegraf } = require('telegraf');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const app = express();

app.use(express.json());
app.use(bot.webhookCallback('/bot'));

bot.telegram.setWebhook(`${process.env.RENDER_EXTERNAL_URL}/bot`).then(() => {
  console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
});

app.get('/', (_, res) => {
  res.send('ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
});

app.listen(10000, () => {
  console.log('üöÄ Webhook server listening on port 10000');
});

bot.start((ctx) => ctx.reply('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ /autorun'));

bot.command('autorun', async (ctx) => {
  console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–æ /autorun');
  await ctx.reply('‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞... –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –≤—Ö–æ–¥ –≤ Minea');

  const browser = await puppeteer.launch({
  headless: true,
  args: ['--no-sandbox', '--disable-setuid-sandbox']
});


  const page = await browser.newPage();

  try {
    await page.goto('https://app.minea.com/en/login', { waitUntil: 'networkidle2' });
    console.log('üîµ –ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Accept...');

    for (let i = 0; i < 10; i++) {
      const acceptBtn = await page.$x("//button[contains(., 'Accept')]");
      if (acceptBtn.length > 0) {
        await acceptBtn[0].click();
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ Accept –Ω–∞–∂–∞—Ç–∞!');
        break;
      }
      console.log('‚è≥ –ö–Ω–æ–ø–∫–∞ Accept –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥—É...');
      await page.waitForTimeout(1000);
    }

    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    await page.type('input[name="email"]', process.env.MINEA_EMAIL, { delay: 50 });
    await page.type('input[name="password"]', process.env.MINEA_PASSWORD, { delay: 50 });
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });
    await ctx.reply('üîì –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Minea! –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É...');

    const sections = [
      { name: 'Shopify', url: 'https://app.minea.com/en/ecom/products/shopify' },
      { name: 'TikTok', url: 'https://app.minea.com/en/ecom/products/tiktok' }
    ];

    for (const section of sections) {
      await ctx.reply(`üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ü–∏–∏: ${section.name}`);
      console.log(`üîµ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–µ–∫—Ü–∏–∏ ${section.name}`);

      try {
        await page.goto(section.url, { waitUntil: 'networkidle2' });
        await page.waitForSelector('a[href*="/quickview"]', { timeout: 30000 });
        const links = await page.$$eval('a[href*="/quickview"]', els => els.map(el => el.href));

        for (let i = 0; i < Math.min(5, links.length); i++) {
          await page.goto(links[i], { waitUntil: 'networkidle2' });
          await page.waitForSelector('img', { timeout: 10000 });
          const imageUrl = await page.$eval('img', el => el.src);
          await ctx.replyWithPhoto(imageUrl, { caption: `üõí ${section.name} —Ç–æ–≤–∞—Ä ${i + 1}: ${links[i]}` });
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${section.name}:`, error.message);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–∫—Ü–∏–∏ ${section.name}`);
      }
    }

    await ctx.reply('‚úÖ –í—Å–µ —Å–µ–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    console.log('‚úÖ –í—Å–µ —Å–µ–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:', err.message);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –Ω–∞ Render.');
  } finally {
    await browser.close();
  }
});

bot.launch({ webhook: { domain: process.env.RENDER_EXTERNAL_URL, hookPath: '/bot' } });



